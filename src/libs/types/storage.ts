import { browser } from 'webextension-polyfill-ts';

export namespace Storage {
    export enum AutomaticFunctions {
        Loader = 'loader',
        Image = 'image',
        Hover = 'hover',
        Minimap = 'minimap',
        LinksInSameTab = 'linksInSameTab',
        NoSameSiteLinks = 'noSameSiteLinks',
    }

    /**
     * Settings for the Loader automatic function
     */
    export interface LoaderSettings {
        colour: string;
        height: number;
        persist: boolean;
    }

    /**
     * Settings for the Minimap automatic function
     */
    export interface MinimapSettings {
        colour: string;
    }

    /**
     * Storage representation for Automatic function settings. These are sent to the function script which is injected via the UserScript API
     */
    export interface AutomaticSettings {
        loader: LoaderSettings;
        minimap: MinimapSettings;
    }

    /**
     * Storage representation for Automatic functions
     */
    export interface AutomaticStorage {
        settings: AutomaticSettings;
        enabled: AutomaticFunctions[];
    }

    /**
     * Representation of the WebExtension storage generated by Kestrel
     */
    export interface Storage {
        automatic: AutomaticStorage;
    }

    /**
     * Utilities for managing the browser's WebExtension storage
     */
    export class StorageManager implements Storage {
        automatic: AutomaticStorage;
        constructor(init: boolean = false, storage?: Storage) {
            if (storage) {
                this.automatic = storage.automatic;
            } else {
                this.automatic = {
                    settings: {
                        loader: {
                            colour: '#16c581',
                            height: 2,
                            persist: false,
                        },
                        minimap: {
                            colour: '#16c581',
                        },
                    },
                    enabled: [],
                };
            }

            if (init) {
                this.initialise();
            }
        }

        initialise() {
            return browser.storage.local.set({ automatic: this.automatic });
        }

        set() {}

        remove() {}

        clear() {
            return browser.storage.local.clear();
        }
    }
}
